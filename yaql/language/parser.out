Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> value
Rule 1     value -> value OP_B value
Rule 2     value -> value OP_C value
Rule 3     value -> value OP_D value
Rule 4     value -> value OP_E value
Rule 5     value -> value OP_F value
Rule 6     value -> value OP_G value
Rule 7     value -> value OP_H value
Rule 8     value -> value OP_I value
Rule 9     value -> value OP_J value
Rule 10    value -> value OP_K value
Rule 11    value -> value OP_L value
Rule 12    value -> value OP_M value
Rule 13    value -> value OP_N value
Rule 14    value -> value OP_O value
Rule 15    value -> value OP_P value
Rule 16    value -> value OP_Q value
Rule 17    value -> value OP_S value
Rule 18    value -> value OP_T value
Rule 19    value -> value OP_U value
Rule 20    value -> OP_D value
Rule 21    value -> OP_E value
Rule 22    value -> OP_R value
Rule 23    value -> QUOTED_STRING
Rule 24    value -> NUMBER
Rule 25    value -> TRUE
Rule 26    value -> FALSE
Rule 27    value -> NULL
Rule 28    value -> KEYWORD_STRING
Rule 29    value -> DOLLAR
Rule 30    value -> ( value )
Rule 31    args -> arglist
Rule 32    args -> named_arglist
Rule 33    args -> arglist , named_arglist
Rule 34    args -> incomplete_arglist , named_arglist
Rule 35    args -> <empty>
Rule 36    value -> value INDEXER args ]
Rule 37    value -> INDEXER args ]
Rule 38    value -> MAP args }
Rule 39    value -> func
Rule 40    named_arg -> value MAPPING value
Rule 41    arglist -> value
Rule 42    arglist -> , arglist
Rule 43    arglist -> arglist , arglist
Rule 44    arglist -> incomplete_arglist , arglist
Rule 45    incomplete_arglist -> arglist ,
Rule 46    named_arglist -> named_arg
Rule 47    named_arglist -> named_arglist , named_arg
Rule 48    func -> FUNC args )

Terminals, with rules where they appear

(                    : 30
)                    : 30 48
,                    : 33 34 42 43 44 45 47
DOLLAR               : 29
FALSE                : 26
FUNC                 : 48
INDEXER              : 36 37
KEYWORD_STRING       : 28
MAP                  : 38
MAPPING              : 40
NULL                 : 27
NUMBER               : 24
OP_B                 : 1
OP_C                 : 2
OP_D                 : 3 20
OP_E                 : 4 21
OP_F                 : 5
OP_G                 : 6
OP_H                 : 7
OP_I                 : 8
OP_J                 : 9
OP_K                 : 10
OP_L                 : 11
OP_M                 : 12
OP_N                 : 13
OP_O                 : 14
OP_P                 : 15
OP_Q                 : 16
OP_R                 : 22
OP_S                 : 17
OP_T                 : 18
OP_U                 : 19
QUOTED_STRING        : 23
TRUE                 : 25
]                    : 36 37
error                :
}                    : 38

Nonterminals, with rules where they appear

arglist              : 31 33 42 43 43 44 45
args                 : 36 37 38 48
func                 : 39
incomplete_arglist   : 34 44
named_arg            : 46 47
named_arglist        : 32 33 34 47
value                : 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 21 22 30 36 40 40 41 0

Parsing method: LALR

state 0

    (0) S' -> . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 1
    func                           shift and go to state 15

state 1

    (0) S' -> value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    OP_K            shift and go to state 26
    OP_L            shift and go to state 27
    OP_M            shift and go to state 28
    OP_N            shift and go to state 29
    OP_O            shift and go to state 30
    OP_P            shift and go to state 31
    OP_Q            shift and go to state 32
    OP_S            shift and go to state 33
    OP_T            shift and go to state 34
    OP_U            shift and go to state 35
    INDEXER         shift and go to state 36


state 2

    (20) value -> OP_D . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 37
    func                           shift and go to state 15

state 3

    (21) value -> OP_E . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 38
    func                           shift and go to state 15

state 4

    (22) value -> OP_R . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 39
    func                           shift and go to state 15

state 5

    (23) value -> QUOTED_STRING .

    OP_B            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_C            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_D            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_E            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_F            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_G            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_H            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_I            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_J            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_K            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_L            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_M            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_N            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_O            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_P            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_Q            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_S            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_T            reduce using rule 23 (value -> QUOTED_STRING .)
    OP_U            reduce using rule 23 (value -> QUOTED_STRING .)
    INDEXER         reduce using rule 23 (value -> QUOTED_STRING .)
    $end            reduce using rule 23 (value -> QUOTED_STRING .)
    )               reduce using rule 23 (value -> QUOTED_STRING .)
    MAPPING         reduce using rule 23 (value -> QUOTED_STRING .)
    ,               reduce using rule 23 (value -> QUOTED_STRING .)
    ]               reduce using rule 23 (value -> QUOTED_STRING .)
    }               reduce using rule 23 (value -> QUOTED_STRING .)


state 6

    (24) value -> NUMBER .

    OP_B            reduce using rule 24 (value -> NUMBER .)
    OP_C            reduce using rule 24 (value -> NUMBER .)
    OP_D            reduce using rule 24 (value -> NUMBER .)
    OP_E            reduce using rule 24 (value -> NUMBER .)
    OP_F            reduce using rule 24 (value -> NUMBER .)
    OP_G            reduce using rule 24 (value -> NUMBER .)
    OP_H            reduce using rule 24 (value -> NUMBER .)
    OP_I            reduce using rule 24 (value -> NUMBER .)
    OP_J            reduce using rule 24 (value -> NUMBER .)
    OP_K            reduce using rule 24 (value -> NUMBER .)
    OP_L            reduce using rule 24 (value -> NUMBER .)
    OP_M            reduce using rule 24 (value -> NUMBER .)
    OP_N            reduce using rule 24 (value -> NUMBER .)
    OP_O            reduce using rule 24 (value -> NUMBER .)
    OP_P            reduce using rule 24 (value -> NUMBER .)
    OP_Q            reduce using rule 24 (value -> NUMBER .)
    OP_S            reduce using rule 24 (value -> NUMBER .)
    OP_T            reduce using rule 24 (value -> NUMBER .)
    OP_U            reduce using rule 24 (value -> NUMBER .)
    INDEXER         reduce using rule 24 (value -> NUMBER .)
    $end            reduce using rule 24 (value -> NUMBER .)
    )               reduce using rule 24 (value -> NUMBER .)
    MAPPING         reduce using rule 24 (value -> NUMBER .)
    ,               reduce using rule 24 (value -> NUMBER .)
    ]               reduce using rule 24 (value -> NUMBER .)
    }               reduce using rule 24 (value -> NUMBER .)


state 7

    (25) value -> TRUE .

    OP_B            reduce using rule 25 (value -> TRUE .)
    OP_C            reduce using rule 25 (value -> TRUE .)
    OP_D            reduce using rule 25 (value -> TRUE .)
    OP_E            reduce using rule 25 (value -> TRUE .)
    OP_F            reduce using rule 25 (value -> TRUE .)
    OP_G            reduce using rule 25 (value -> TRUE .)
    OP_H            reduce using rule 25 (value -> TRUE .)
    OP_I            reduce using rule 25 (value -> TRUE .)
    OP_J            reduce using rule 25 (value -> TRUE .)
    OP_K            reduce using rule 25 (value -> TRUE .)
    OP_L            reduce using rule 25 (value -> TRUE .)
    OP_M            reduce using rule 25 (value -> TRUE .)
    OP_N            reduce using rule 25 (value -> TRUE .)
    OP_O            reduce using rule 25 (value -> TRUE .)
    OP_P            reduce using rule 25 (value -> TRUE .)
    OP_Q            reduce using rule 25 (value -> TRUE .)
    OP_S            reduce using rule 25 (value -> TRUE .)
    OP_T            reduce using rule 25 (value -> TRUE .)
    OP_U            reduce using rule 25 (value -> TRUE .)
    INDEXER         reduce using rule 25 (value -> TRUE .)
    $end            reduce using rule 25 (value -> TRUE .)
    )               reduce using rule 25 (value -> TRUE .)
    MAPPING         reduce using rule 25 (value -> TRUE .)
    ,               reduce using rule 25 (value -> TRUE .)
    ]               reduce using rule 25 (value -> TRUE .)
    }               reduce using rule 25 (value -> TRUE .)


state 8

    (26) value -> FALSE .

    OP_B            reduce using rule 26 (value -> FALSE .)
    OP_C            reduce using rule 26 (value -> FALSE .)
    OP_D            reduce using rule 26 (value -> FALSE .)
    OP_E            reduce using rule 26 (value -> FALSE .)
    OP_F            reduce using rule 26 (value -> FALSE .)
    OP_G            reduce using rule 26 (value -> FALSE .)
    OP_H            reduce using rule 26 (value -> FALSE .)
    OP_I            reduce using rule 26 (value -> FALSE .)
    OP_J            reduce using rule 26 (value -> FALSE .)
    OP_K            reduce using rule 26 (value -> FALSE .)
    OP_L            reduce using rule 26 (value -> FALSE .)
    OP_M            reduce using rule 26 (value -> FALSE .)
    OP_N            reduce using rule 26 (value -> FALSE .)
    OP_O            reduce using rule 26 (value -> FALSE .)
    OP_P            reduce using rule 26 (value -> FALSE .)
    OP_Q            reduce using rule 26 (value -> FALSE .)
    OP_S            reduce using rule 26 (value -> FALSE .)
    OP_T            reduce using rule 26 (value -> FALSE .)
    OP_U            reduce using rule 26 (value -> FALSE .)
    INDEXER         reduce using rule 26 (value -> FALSE .)
    $end            reduce using rule 26 (value -> FALSE .)
    )               reduce using rule 26 (value -> FALSE .)
    MAPPING         reduce using rule 26 (value -> FALSE .)
    ,               reduce using rule 26 (value -> FALSE .)
    ]               reduce using rule 26 (value -> FALSE .)
    }               reduce using rule 26 (value -> FALSE .)


state 9

    (27) value -> NULL .

    OP_B            reduce using rule 27 (value -> NULL .)
    OP_C            reduce using rule 27 (value -> NULL .)
    OP_D            reduce using rule 27 (value -> NULL .)
    OP_E            reduce using rule 27 (value -> NULL .)
    OP_F            reduce using rule 27 (value -> NULL .)
    OP_G            reduce using rule 27 (value -> NULL .)
    OP_H            reduce using rule 27 (value -> NULL .)
    OP_I            reduce using rule 27 (value -> NULL .)
    OP_J            reduce using rule 27 (value -> NULL .)
    OP_K            reduce using rule 27 (value -> NULL .)
    OP_L            reduce using rule 27 (value -> NULL .)
    OP_M            reduce using rule 27 (value -> NULL .)
    OP_N            reduce using rule 27 (value -> NULL .)
    OP_O            reduce using rule 27 (value -> NULL .)
    OP_P            reduce using rule 27 (value -> NULL .)
    OP_Q            reduce using rule 27 (value -> NULL .)
    OP_S            reduce using rule 27 (value -> NULL .)
    OP_T            reduce using rule 27 (value -> NULL .)
    OP_U            reduce using rule 27 (value -> NULL .)
    INDEXER         reduce using rule 27 (value -> NULL .)
    $end            reduce using rule 27 (value -> NULL .)
    )               reduce using rule 27 (value -> NULL .)
    MAPPING         reduce using rule 27 (value -> NULL .)
    ,               reduce using rule 27 (value -> NULL .)
    ]               reduce using rule 27 (value -> NULL .)
    }               reduce using rule 27 (value -> NULL .)


state 10

    (28) value -> KEYWORD_STRING .

    OP_B            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_C            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_D            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_E            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_F            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_G            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_H            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_I            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_J            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_K            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_L            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_M            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_N            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_O            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_P            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_Q            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_S            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_T            reduce using rule 28 (value -> KEYWORD_STRING .)
    OP_U            reduce using rule 28 (value -> KEYWORD_STRING .)
    INDEXER         reduce using rule 28 (value -> KEYWORD_STRING .)
    $end            reduce using rule 28 (value -> KEYWORD_STRING .)
    )               reduce using rule 28 (value -> KEYWORD_STRING .)
    MAPPING         reduce using rule 28 (value -> KEYWORD_STRING .)
    ,               reduce using rule 28 (value -> KEYWORD_STRING .)
    ]               reduce using rule 28 (value -> KEYWORD_STRING .)
    }               reduce using rule 28 (value -> KEYWORD_STRING .)


state 11

    (29) value -> DOLLAR .

    OP_B            reduce using rule 29 (value -> DOLLAR .)
    OP_C            reduce using rule 29 (value -> DOLLAR .)
    OP_D            reduce using rule 29 (value -> DOLLAR .)
    OP_E            reduce using rule 29 (value -> DOLLAR .)
    OP_F            reduce using rule 29 (value -> DOLLAR .)
    OP_G            reduce using rule 29 (value -> DOLLAR .)
    OP_H            reduce using rule 29 (value -> DOLLAR .)
    OP_I            reduce using rule 29 (value -> DOLLAR .)
    OP_J            reduce using rule 29 (value -> DOLLAR .)
    OP_K            reduce using rule 29 (value -> DOLLAR .)
    OP_L            reduce using rule 29 (value -> DOLLAR .)
    OP_M            reduce using rule 29 (value -> DOLLAR .)
    OP_N            reduce using rule 29 (value -> DOLLAR .)
    OP_O            reduce using rule 29 (value -> DOLLAR .)
    OP_P            reduce using rule 29 (value -> DOLLAR .)
    OP_Q            reduce using rule 29 (value -> DOLLAR .)
    OP_S            reduce using rule 29 (value -> DOLLAR .)
    OP_T            reduce using rule 29 (value -> DOLLAR .)
    OP_U            reduce using rule 29 (value -> DOLLAR .)
    INDEXER         reduce using rule 29 (value -> DOLLAR .)
    $end            reduce using rule 29 (value -> DOLLAR .)
    )               reduce using rule 29 (value -> DOLLAR .)
    MAPPING         reduce using rule 29 (value -> DOLLAR .)
    ,               reduce using rule 29 (value -> DOLLAR .)
    ]               reduce using rule 29 (value -> DOLLAR .)
    }               reduce using rule 29 (value -> DOLLAR .)


state 12

    (30) value -> ( . value )
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 40
    func                           shift and go to state 15

state 13

    (37) value -> INDEXER . args ]
    (31) args -> . arglist
    (32) args -> . named_arglist
    (33) args -> . arglist , named_arglist
    (34) args -> . incomplete_arglist , named_arglist
    (35) args -> .
    (41) arglist -> . value
    (42) arglist -> . , arglist
    (43) arglist -> . arglist , arglist
    (44) arglist -> . incomplete_arglist , arglist
    (46) named_arglist -> . named_arg
    (47) named_arglist -> . named_arglist , named_arg
    (45) incomplete_arglist -> . arglist ,
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (40) named_arg -> . value MAPPING value
    (48) func -> . FUNC args )

    ]               reduce using rule 35 (args -> .)
    ,               shift and go to state 44
    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    args                           shift and go to state 41
    arglist                        shift and go to state 42
    named_arglist                  shift and go to state 43
    incomplete_arglist             shift and go to state 45
    value                          shift and go to state 46
    named_arg                      shift and go to state 47
    func                           shift and go to state 15

state 14

    (38) value -> MAP . args }
    (31) args -> . arglist
    (32) args -> . named_arglist
    (33) args -> . arglist , named_arglist
    (34) args -> . incomplete_arglist , named_arglist
    (35) args -> .
    (41) arglist -> . value
    (42) arglist -> . , arglist
    (43) arglist -> . arglist , arglist
    (44) arglist -> . incomplete_arglist , arglist
    (46) named_arglist -> . named_arg
    (47) named_arglist -> . named_arglist , named_arg
    (45) incomplete_arglist -> . arglist ,
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (40) named_arg -> . value MAPPING value
    (48) func -> . FUNC args )

    }               reduce using rule 35 (args -> .)
    ,               shift and go to state 44
    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    args                           shift and go to state 48
    arglist                        shift and go to state 42
    named_arglist                  shift and go to state 43
    incomplete_arglist             shift and go to state 45
    value                          shift and go to state 46
    named_arg                      shift and go to state 47
    func                           shift and go to state 15

state 15

    (39) value -> func .

    OP_B            reduce using rule 39 (value -> func .)
    OP_C            reduce using rule 39 (value -> func .)
    OP_D            reduce using rule 39 (value -> func .)
    OP_E            reduce using rule 39 (value -> func .)
    OP_F            reduce using rule 39 (value -> func .)
    OP_G            reduce using rule 39 (value -> func .)
    OP_H            reduce using rule 39 (value -> func .)
    OP_I            reduce using rule 39 (value -> func .)
    OP_J            reduce using rule 39 (value -> func .)
    OP_K            reduce using rule 39 (value -> func .)
    OP_L            reduce using rule 39 (value -> func .)
    OP_M            reduce using rule 39 (value -> func .)
    OP_N            reduce using rule 39 (value -> func .)
    OP_O            reduce using rule 39 (value -> func .)
    OP_P            reduce using rule 39 (value -> func .)
    OP_Q            reduce using rule 39 (value -> func .)
    OP_S            reduce using rule 39 (value -> func .)
    OP_T            reduce using rule 39 (value -> func .)
    OP_U            reduce using rule 39 (value -> func .)
    INDEXER         reduce using rule 39 (value -> func .)
    $end            reduce using rule 39 (value -> func .)
    )               reduce using rule 39 (value -> func .)
    MAPPING         reduce using rule 39 (value -> func .)
    ,               reduce using rule 39 (value -> func .)
    ]               reduce using rule 39 (value -> func .)
    }               reduce using rule 39 (value -> func .)


state 16

    (48) func -> FUNC . args )
    (31) args -> . arglist
    (32) args -> . named_arglist
    (33) args -> . arglist , named_arglist
    (34) args -> . incomplete_arglist , named_arglist
    (35) args -> .
    (41) arglist -> . value
    (42) arglist -> . , arglist
    (43) arglist -> . arglist , arglist
    (44) arglist -> . incomplete_arglist , arglist
    (46) named_arglist -> . named_arg
    (47) named_arglist -> . named_arglist , named_arg
    (45) incomplete_arglist -> . arglist ,
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (40) named_arg -> . value MAPPING value
    (48) func -> . FUNC args )

    )               reduce using rule 35 (args -> .)
    ,               shift and go to state 44
    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    args                           shift and go to state 49
    arglist                        shift and go to state 42
    named_arglist                  shift and go to state 43
    incomplete_arglist             shift and go to state 45
    value                          shift and go to state 46
    named_arg                      shift and go to state 47
    func                           shift and go to state 15

state 17

    (1) value -> value OP_B . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 50
    func                           shift and go to state 15

state 18

    (2) value -> value OP_C . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 51
    func                           shift and go to state 15

state 19

    (3) value -> value OP_D . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 52
    func                           shift and go to state 15

state 20

    (4) value -> value OP_E . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 53
    func                           shift and go to state 15

state 21

    (5) value -> value OP_F . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 54
    func                           shift and go to state 15

state 22

    (6) value -> value OP_G . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 55
    func                           shift and go to state 15

state 23

    (7) value -> value OP_H . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 56
    func                           shift and go to state 15

state 24

    (8) value -> value OP_I . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 57
    func                           shift and go to state 15

state 25

    (9) value -> value OP_J . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 58
    func                           shift and go to state 15

state 26

    (10) value -> value OP_K . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 59
    func                           shift and go to state 15

state 27

    (11) value -> value OP_L . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 60
    func                           shift and go to state 15

state 28

    (12) value -> value OP_M . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 61
    func                           shift and go to state 15

state 29

    (13) value -> value OP_N . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 62
    func                           shift and go to state 15

state 30

    (14) value -> value OP_O . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 63
    func                           shift and go to state 15

state 31

    (15) value -> value OP_P . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 64
    func                           shift and go to state 15

state 32

    (16) value -> value OP_Q . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 65
    func                           shift and go to state 15

state 33

    (17) value -> value OP_S . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 66
    func                           shift and go to state 15

state 34

    (18) value -> value OP_T . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 67
    func                           shift and go to state 15

state 35

    (19) value -> value OP_U . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 68
    func                           shift and go to state 15

state 36

    (36) value -> value INDEXER . args ]
    (31) args -> . arglist
    (32) args -> . named_arglist
    (33) args -> . arglist , named_arglist
    (34) args -> . incomplete_arglist , named_arglist
    (35) args -> .
    (41) arglist -> . value
    (42) arglist -> . , arglist
    (43) arglist -> . arglist , arglist
    (44) arglist -> . incomplete_arglist , arglist
    (46) named_arglist -> . named_arg
    (47) named_arglist -> . named_arglist , named_arg
    (45) incomplete_arglist -> . arglist ,
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (40) named_arg -> . value MAPPING value
    (48) func -> . FUNC args )

    ]               reduce using rule 35 (args -> .)
    ,               shift and go to state 44
    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 46
    args                           shift and go to state 69
    arglist                        shift and go to state 42
    named_arglist                  shift and go to state 43
    incomplete_arglist             shift and go to state 45
    named_arg                      shift and go to state 47
    func                           shift and go to state 15

state 37

    (20) value -> OP_D value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_D            reduce using rule 20 (value -> OP_D value .)
    OP_E            reduce using rule 20 (value -> OP_D value .)
    OP_F            reduce using rule 20 (value -> OP_D value .)
    OP_G            reduce using rule 20 (value -> OP_D value .)
    OP_H            reduce using rule 20 (value -> OP_D value .)
    OP_I            reduce using rule 20 (value -> OP_D value .)
    OP_J            reduce using rule 20 (value -> OP_D value .)
    OP_K            reduce using rule 20 (value -> OP_D value .)
    OP_L            reduce using rule 20 (value -> OP_D value .)
    OP_M            reduce using rule 20 (value -> OP_D value .)
    OP_N            reduce using rule 20 (value -> OP_D value .)
    OP_O            reduce using rule 20 (value -> OP_D value .)
    OP_P            reduce using rule 20 (value -> OP_D value .)
    OP_Q            reduce using rule 20 (value -> OP_D value .)
    OP_S            reduce using rule 20 (value -> OP_D value .)
    OP_T            reduce using rule 20 (value -> OP_D value .)
    OP_U            reduce using rule 20 (value -> OP_D value .)
    $end            reduce using rule 20 (value -> OP_D value .)
    )               reduce using rule 20 (value -> OP_D value .)
    MAPPING         reduce using rule 20 (value -> OP_D value .)
    ,               reduce using rule 20 (value -> OP_D value .)
    ]               reduce using rule 20 (value -> OP_D value .)
    }               reduce using rule 20 (value -> OP_D value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 20 (value -> OP_D value .) ]
  ! OP_C            [ reduce using rule 20 (value -> OP_D value .) ]
  ! INDEXER         [ reduce using rule 20 (value -> OP_D value .) ]
  ! OP_D            [ shift and go to state 19 ]
  ! OP_E            [ shift and go to state 20 ]
  ! OP_F            [ shift and go to state 21 ]
  ! OP_G            [ shift and go to state 22 ]
  ! OP_H            [ shift and go to state 23 ]
  ! OP_I            [ shift and go to state 24 ]
  ! OP_J            [ shift and go to state 25 ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 38

    (21) value -> OP_E value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_D            reduce using rule 21 (value -> OP_E value .)
    OP_E            reduce using rule 21 (value -> OP_E value .)
    OP_F            reduce using rule 21 (value -> OP_E value .)
    OP_G            reduce using rule 21 (value -> OP_E value .)
    OP_H            reduce using rule 21 (value -> OP_E value .)
    OP_I            reduce using rule 21 (value -> OP_E value .)
    OP_J            reduce using rule 21 (value -> OP_E value .)
    OP_K            reduce using rule 21 (value -> OP_E value .)
    OP_L            reduce using rule 21 (value -> OP_E value .)
    OP_M            reduce using rule 21 (value -> OP_E value .)
    OP_N            reduce using rule 21 (value -> OP_E value .)
    OP_O            reduce using rule 21 (value -> OP_E value .)
    OP_P            reduce using rule 21 (value -> OP_E value .)
    OP_Q            reduce using rule 21 (value -> OP_E value .)
    OP_S            reduce using rule 21 (value -> OP_E value .)
    OP_T            reduce using rule 21 (value -> OP_E value .)
    OP_U            reduce using rule 21 (value -> OP_E value .)
    $end            reduce using rule 21 (value -> OP_E value .)
    )               reduce using rule 21 (value -> OP_E value .)
    MAPPING         reduce using rule 21 (value -> OP_E value .)
    ,               reduce using rule 21 (value -> OP_E value .)
    ]               reduce using rule 21 (value -> OP_E value .)
    }               reduce using rule 21 (value -> OP_E value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 21 (value -> OP_E value .) ]
  ! OP_C            [ reduce using rule 21 (value -> OP_E value .) ]
  ! INDEXER         [ reduce using rule 21 (value -> OP_E value .) ]
  ! OP_D            [ shift and go to state 19 ]
  ! OP_E            [ shift and go to state 20 ]
  ! OP_F            [ shift and go to state 21 ]
  ! OP_G            [ shift and go to state 22 ]
  ! OP_H            [ shift and go to state 23 ]
  ! OP_I            [ shift and go to state 24 ]
  ! OP_J            [ shift and go to state 25 ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 39

    (22) value -> OP_R value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_S            reduce using rule 22 (value -> OP_R value .)
    OP_T            reduce using rule 22 (value -> OP_R value .)
    OP_U            reduce using rule 22 (value -> OP_R value .)
    $end            reduce using rule 22 (value -> OP_R value .)
    )               reduce using rule 22 (value -> OP_R value .)
    MAPPING         reduce using rule 22 (value -> OP_R value .)
    ,               reduce using rule 22 (value -> OP_R value .)
    ]               reduce using rule 22 (value -> OP_R value .)
    }               reduce using rule 22 (value -> OP_R value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    OP_K            shift and go to state 26
    OP_L            shift and go to state 27
    OP_M            shift and go to state 28
    OP_N            shift and go to state 29
    OP_O            shift and go to state 30
    OP_P            shift and go to state 31
    OP_Q            shift and go to state 32
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_C            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_D            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_E            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_F            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_G            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_H            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_I            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_J            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_K            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_L            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_M            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_N            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_O            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_P            [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_Q            [ reduce using rule 22 (value -> OP_R value .) ]
  ! INDEXER         [ reduce using rule 22 (value -> OP_R value .) ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 40

    (30) value -> ( value . )
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    )               shift and go to state 70
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    OP_K            shift and go to state 26
    OP_L            shift and go to state 27
    OP_M            shift and go to state 28
    OP_N            shift and go to state 29
    OP_O            shift and go to state 30
    OP_P            shift and go to state 31
    OP_Q            shift and go to state 32
    OP_S            shift and go to state 33
    OP_T            shift and go to state 34
    OP_U            shift and go to state 35
    INDEXER         shift and go to state 36


state 41

    (37) value -> INDEXER args . ]

    ]               shift and go to state 71


state 42

    (31) args -> arglist .
    (33) args -> arglist . , named_arglist
    (43) arglist -> arglist . , arglist
    (45) incomplete_arglist -> arglist . ,

    ]               reduce using rule 31 (args -> arglist .)
    }               reduce using rule 31 (args -> arglist .)
    )               reduce using rule 31 (args -> arglist .)
    ,               shift and go to state 72


state 43

    (32) args -> named_arglist .
    (47) named_arglist -> named_arglist . , named_arg

    ]               reduce using rule 32 (args -> named_arglist .)
    }               reduce using rule 32 (args -> named_arglist .)
    )               reduce using rule 32 (args -> named_arglist .)
    ,               shift and go to state 73


state 44

    (42) arglist -> , . arglist
    (41) arglist -> . value
    (42) arglist -> . , arglist
    (43) arglist -> . arglist , arglist
    (44) arglist -> . incomplete_arglist , arglist
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (45) incomplete_arglist -> . arglist ,
    (48) func -> . FUNC args )

    ,               shift and go to state 44
    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    arglist                        shift and go to state 74
    value                          shift and go to state 75
    incomplete_arglist             shift and go to state 76
    func                           shift and go to state 15

state 45

    (34) args -> incomplete_arglist . , named_arglist
    (44) arglist -> incomplete_arglist . , arglist

    ,               shift and go to state 77


state 46

    (41) arglist -> value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]
    (40) named_arg -> value . MAPPING value

    ,               reduce using rule 41 (arglist -> value .)
    ]               reduce using rule 41 (arglist -> value .)
    }               reduce using rule 41 (arglist -> value .)
    )               reduce using rule 41 (arglist -> value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    OP_K            shift and go to state 26
    OP_L            shift and go to state 27
    OP_M            shift and go to state 28
    OP_N            shift and go to state 29
    OP_O            shift and go to state 30
    OP_P            shift and go to state 31
    OP_Q            shift and go to state 32
    OP_S            shift and go to state 33
    OP_T            shift and go to state 34
    OP_U            shift and go to state 35
    INDEXER         shift and go to state 36
    MAPPING         shift and go to state 78


state 47

    (46) named_arglist -> named_arg .

    ,               reduce using rule 46 (named_arglist -> named_arg .)
    ]               reduce using rule 46 (named_arglist -> named_arg .)
    }               reduce using rule 46 (named_arglist -> named_arg .)
    )               reduce using rule 46 (named_arglist -> named_arg .)


state 48

    (38) value -> MAP args . }

    }               shift and go to state 79


state 49

    (48) func -> FUNC args . )

    )               shift and go to state 80


state 50

    (1) value -> value OP_B value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_B            reduce using rule 1 (value -> value OP_B value .)
    OP_C            reduce using rule 1 (value -> value OP_B value .)
    OP_D            reduce using rule 1 (value -> value OP_B value .)
    OP_E            reduce using rule 1 (value -> value OP_B value .)
    OP_F            reduce using rule 1 (value -> value OP_B value .)
    OP_G            reduce using rule 1 (value -> value OP_B value .)
    OP_H            reduce using rule 1 (value -> value OP_B value .)
    OP_I            reduce using rule 1 (value -> value OP_B value .)
    OP_J            reduce using rule 1 (value -> value OP_B value .)
    OP_K            reduce using rule 1 (value -> value OP_B value .)
    OP_L            reduce using rule 1 (value -> value OP_B value .)
    OP_M            reduce using rule 1 (value -> value OP_B value .)
    OP_N            reduce using rule 1 (value -> value OP_B value .)
    OP_O            reduce using rule 1 (value -> value OP_B value .)
    OP_P            reduce using rule 1 (value -> value OP_B value .)
    OP_Q            reduce using rule 1 (value -> value OP_B value .)
    OP_S            reduce using rule 1 (value -> value OP_B value .)
    OP_T            reduce using rule 1 (value -> value OP_B value .)
    OP_U            reduce using rule 1 (value -> value OP_B value .)
    INDEXER         reduce using rule 1 (value -> value OP_B value .)
    $end            reduce using rule 1 (value -> value OP_B value .)
    )               reduce using rule 1 (value -> value OP_B value .)
    MAPPING         reduce using rule 1 (value -> value OP_B value .)
    ,               reduce using rule 1 (value -> value OP_B value .)
    ]               reduce using rule 1 (value -> value OP_B value .)
    }               reduce using rule 1 (value -> value OP_B value .)

  ! OP_B            [ shift and go to state 17 ]
  ! OP_C            [ shift and go to state 18 ]
  ! OP_D            [ shift and go to state 19 ]
  ! OP_E            [ shift and go to state 20 ]
  ! OP_F            [ shift and go to state 21 ]
  ! OP_G            [ shift and go to state 22 ]
  ! OP_H            [ shift and go to state 23 ]
  ! OP_I            [ shift and go to state 24 ]
  ! OP_J            [ shift and go to state 25 ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]
  ! INDEXER         [ shift and go to state 36 ]


state 51

    (2) value -> value OP_C value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_B            reduce using rule 2 (value -> value OP_C value .)
    OP_C            reduce using rule 2 (value -> value OP_C value .)
    OP_D            reduce using rule 2 (value -> value OP_C value .)
    OP_E            reduce using rule 2 (value -> value OP_C value .)
    OP_F            reduce using rule 2 (value -> value OP_C value .)
    OP_G            reduce using rule 2 (value -> value OP_C value .)
    OP_H            reduce using rule 2 (value -> value OP_C value .)
    OP_I            reduce using rule 2 (value -> value OP_C value .)
    OP_J            reduce using rule 2 (value -> value OP_C value .)
    OP_K            reduce using rule 2 (value -> value OP_C value .)
    OP_L            reduce using rule 2 (value -> value OP_C value .)
    OP_M            reduce using rule 2 (value -> value OP_C value .)
    OP_N            reduce using rule 2 (value -> value OP_C value .)
    OP_O            reduce using rule 2 (value -> value OP_C value .)
    OP_P            reduce using rule 2 (value -> value OP_C value .)
    OP_Q            reduce using rule 2 (value -> value OP_C value .)
    OP_S            reduce using rule 2 (value -> value OP_C value .)
    OP_T            reduce using rule 2 (value -> value OP_C value .)
    OP_U            reduce using rule 2 (value -> value OP_C value .)
    INDEXER         reduce using rule 2 (value -> value OP_C value .)
    $end            reduce using rule 2 (value -> value OP_C value .)
    )               reduce using rule 2 (value -> value OP_C value .)
    MAPPING         reduce using rule 2 (value -> value OP_C value .)
    ,               reduce using rule 2 (value -> value OP_C value .)
    ]               reduce using rule 2 (value -> value OP_C value .)
    }               reduce using rule 2 (value -> value OP_C value .)

  ! OP_B            [ shift and go to state 17 ]
  ! OP_C            [ shift and go to state 18 ]
  ! OP_D            [ shift and go to state 19 ]
  ! OP_E            [ shift and go to state 20 ]
  ! OP_F            [ shift and go to state 21 ]
  ! OP_G            [ shift and go to state 22 ]
  ! OP_H            [ shift and go to state 23 ]
  ! OP_I            [ shift and go to state 24 ]
  ! OP_J            [ shift and go to state 25 ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]
  ! INDEXER         [ shift and go to state 36 ]


state 52

    (3) value -> value OP_D value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_D            reduce using rule 3 (value -> value OP_D value .)
    OP_E            reduce using rule 3 (value -> value OP_D value .)
    OP_K            reduce using rule 3 (value -> value OP_D value .)
    OP_L            reduce using rule 3 (value -> value OP_D value .)
    OP_M            reduce using rule 3 (value -> value OP_D value .)
    OP_N            reduce using rule 3 (value -> value OP_D value .)
    OP_O            reduce using rule 3 (value -> value OP_D value .)
    OP_P            reduce using rule 3 (value -> value OP_D value .)
    OP_Q            reduce using rule 3 (value -> value OP_D value .)
    OP_S            reduce using rule 3 (value -> value OP_D value .)
    OP_T            reduce using rule 3 (value -> value OP_D value .)
    OP_U            reduce using rule 3 (value -> value OP_D value .)
    $end            reduce using rule 3 (value -> value OP_D value .)
    )               reduce using rule 3 (value -> value OP_D value .)
    MAPPING         reduce using rule 3 (value -> value OP_D value .)
    ,               reduce using rule 3 (value -> value OP_D value .)
    ]               reduce using rule 3 (value -> value OP_D value .)
    }               reduce using rule 3 (value -> value OP_D value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 3 (value -> value OP_D value .) ]
  ! OP_C            [ reduce using rule 3 (value -> value OP_D value .) ]
  ! OP_F            [ reduce using rule 3 (value -> value OP_D value .) ]
  ! OP_G            [ reduce using rule 3 (value -> value OP_D value .) ]
  ! OP_H            [ reduce using rule 3 (value -> value OP_D value .) ]
  ! OP_I            [ reduce using rule 3 (value -> value OP_D value .) ]
  ! OP_J            [ reduce using rule 3 (value -> value OP_D value .) ]
  ! INDEXER         [ reduce using rule 3 (value -> value OP_D value .) ]
  ! OP_D            [ shift and go to state 19 ]
  ! OP_E            [ shift and go to state 20 ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 53

    (4) value -> value OP_E value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_D            reduce using rule 4 (value -> value OP_E value .)
    OP_E            reduce using rule 4 (value -> value OP_E value .)
    OP_K            reduce using rule 4 (value -> value OP_E value .)
    OP_L            reduce using rule 4 (value -> value OP_E value .)
    OP_M            reduce using rule 4 (value -> value OP_E value .)
    OP_N            reduce using rule 4 (value -> value OP_E value .)
    OP_O            reduce using rule 4 (value -> value OP_E value .)
    OP_P            reduce using rule 4 (value -> value OP_E value .)
    OP_Q            reduce using rule 4 (value -> value OP_E value .)
    OP_S            reduce using rule 4 (value -> value OP_E value .)
    OP_T            reduce using rule 4 (value -> value OP_E value .)
    OP_U            reduce using rule 4 (value -> value OP_E value .)
    $end            reduce using rule 4 (value -> value OP_E value .)
    )               reduce using rule 4 (value -> value OP_E value .)
    MAPPING         reduce using rule 4 (value -> value OP_E value .)
    ,               reduce using rule 4 (value -> value OP_E value .)
    ]               reduce using rule 4 (value -> value OP_E value .)
    }               reduce using rule 4 (value -> value OP_E value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 4 (value -> value OP_E value .) ]
  ! OP_C            [ reduce using rule 4 (value -> value OP_E value .) ]
  ! OP_F            [ reduce using rule 4 (value -> value OP_E value .) ]
  ! OP_G            [ reduce using rule 4 (value -> value OP_E value .) ]
  ! OP_H            [ reduce using rule 4 (value -> value OP_E value .) ]
  ! OP_I            [ reduce using rule 4 (value -> value OP_E value .) ]
  ! OP_J            [ reduce using rule 4 (value -> value OP_E value .) ]
  ! INDEXER         [ reduce using rule 4 (value -> value OP_E value .) ]
  ! OP_D            [ shift and go to state 19 ]
  ! OP_E            [ shift and go to state 20 ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 54

    (5) value -> value OP_F value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_D            reduce using rule 5 (value -> value OP_F value .)
    OP_E            reduce using rule 5 (value -> value OP_F value .)
    OP_F            reduce using rule 5 (value -> value OP_F value .)
    OP_G            reduce using rule 5 (value -> value OP_F value .)
    OP_H            reduce using rule 5 (value -> value OP_F value .)
    OP_I            reduce using rule 5 (value -> value OP_F value .)
    OP_J            reduce using rule 5 (value -> value OP_F value .)
    OP_K            reduce using rule 5 (value -> value OP_F value .)
    OP_L            reduce using rule 5 (value -> value OP_F value .)
    OP_M            reduce using rule 5 (value -> value OP_F value .)
    OP_N            reduce using rule 5 (value -> value OP_F value .)
    OP_O            reduce using rule 5 (value -> value OP_F value .)
    OP_P            reduce using rule 5 (value -> value OP_F value .)
    OP_Q            reduce using rule 5 (value -> value OP_F value .)
    OP_S            reduce using rule 5 (value -> value OP_F value .)
    OP_T            reduce using rule 5 (value -> value OP_F value .)
    OP_U            reduce using rule 5 (value -> value OP_F value .)
    $end            reduce using rule 5 (value -> value OP_F value .)
    )               reduce using rule 5 (value -> value OP_F value .)
    MAPPING         reduce using rule 5 (value -> value OP_F value .)
    ,               reduce using rule 5 (value -> value OP_F value .)
    ]               reduce using rule 5 (value -> value OP_F value .)
    }               reduce using rule 5 (value -> value OP_F value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 5 (value -> value OP_F value .) ]
  ! OP_C            [ reduce using rule 5 (value -> value OP_F value .) ]
  ! INDEXER         [ reduce using rule 5 (value -> value OP_F value .) ]
  ! OP_D            [ shift and go to state 19 ]
  ! OP_E            [ shift and go to state 20 ]
  ! OP_F            [ shift and go to state 21 ]
  ! OP_G            [ shift and go to state 22 ]
  ! OP_H            [ shift and go to state 23 ]
  ! OP_I            [ shift and go to state 24 ]
  ! OP_J            [ shift and go to state 25 ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 55

    (6) value -> value OP_G value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_D            reduce using rule 6 (value -> value OP_G value .)
    OP_E            reduce using rule 6 (value -> value OP_G value .)
    OP_F            reduce using rule 6 (value -> value OP_G value .)
    OP_G            reduce using rule 6 (value -> value OP_G value .)
    OP_H            reduce using rule 6 (value -> value OP_G value .)
    OP_I            reduce using rule 6 (value -> value OP_G value .)
    OP_J            reduce using rule 6 (value -> value OP_G value .)
    OP_K            reduce using rule 6 (value -> value OP_G value .)
    OP_L            reduce using rule 6 (value -> value OP_G value .)
    OP_M            reduce using rule 6 (value -> value OP_G value .)
    OP_N            reduce using rule 6 (value -> value OP_G value .)
    OP_O            reduce using rule 6 (value -> value OP_G value .)
    OP_P            reduce using rule 6 (value -> value OP_G value .)
    OP_Q            reduce using rule 6 (value -> value OP_G value .)
    OP_S            reduce using rule 6 (value -> value OP_G value .)
    OP_T            reduce using rule 6 (value -> value OP_G value .)
    OP_U            reduce using rule 6 (value -> value OP_G value .)
    $end            reduce using rule 6 (value -> value OP_G value .)
    )               reduce using rule 6 (value -> value OP_G value .)
    MAPPING         reduce using rule 6 (value -> value OP_G value .)
    ,               reduce using rule 6 (value -> value OP_G value .)
    ]               reduce using rule 6 (value -> value OP_G value .)
    }               reduce using rule 6 (value -> value OP_G value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 6 (value -> value OP_G value .) ]
  ! OP_C            [ reduce using rule 6 (value -> value OP_G value .) ]
  ! INDEXER         [ reduce using rule 6 (value -> value OP_G value .) ]
  ! OP_D            [ shift and go to state 19 ]
  ! OP_E            [ shift and go to state 20 ]
  ! OP_F            [ shift and go to state 21 ]
  ! OP_G            [ shift and go to state 22 ]
  ! OP_H            [ shift and go to state 23 ]
  ! OP_I            [ shift and go to state 24 ]
  ! OP_J            [ shift and go to state 25 ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 56

    (7) value -> value OP_H value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_D            reduce using rule 7 (value -> value OP_H value .)
    OP_E            reduce using rule 7 (value -> value OP_H value .)
    OP_H            reduce using rule 7 (value -> value OP_H value .)
    OP_I            reduce using rule 7 (value -> value OP_H value .)
    OP_J            reduce using rule 7 (value -> value OP_H value .)
    OP_K            reduce using rule 7 (value -> value OP_H value .)
    OP_L            reduce using rule 7 (value -> value OP_H value .)
    OP_M            reduce using rule 7 (value -> value OP_H value .)
    OP_N            reduce using rule 7 (value -> value OP_H value .)
    OP_O            reduce using rule 7 (value -> value OP_H value .)
    OP_P            reduce using rule 7 (value -> value OP_H value .)
    OP_Q            reduce using rule 7 (value -> value OP_H value .)
    OP_S            reduce using rule 7 (value -> value OP_H value .)
    OP_T            reduce using rule 7 (value -> value OP_H value .)
    OP_U            reduce using rule 7 (value -> value OP_H value .)
    $end            reduce using rule 7 (value -> value OP_H value .)
    )               reduce using rule 7 (value -> value OP_H value .)
    MAPPING         reduce using rule 7 (value -> value OP_H value .)
    ,               reduce using rule 7 (value -> value OP_H value .)
    ]               reduce using rule 7 (value -> value OP_H value .)
    }               reduce using rule 7 (value -> value OP_H value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 7 (value -> value OP_H value .) ]
  ! OP_C            [ reduce using rule 7 (value -> value OP_H value .) ]
  ! OP_F            [ reduce using rule 7 (value -> value OP_H value .) ]
  ! OP_G            [ reduce using rule 7 (value -> value OP_H value .) ]
  ! INDEXER         [ reduce using rule 7 (value -> value OP_H value .) ]
  ! OP_D            [ shift and go to state 19 ]
  ! OP_E            [ shift and go to state 20 ]
  ! OP_H            [ shift and go to state 23 ]
  ! OP_I            [ shift and go to state 24 ]
  ! OP_J            [ shift and go to state 25 ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 57

    (8) value -> value OP_I value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_D            reduce using rule 8 (value -> value OP_I value .)
    OP_E            reduce using rule 8 (value -> value OP_I value .)
    OP_H            reduce using rule 8 (value -> value OP_I value .)
    OP_I            reduce using rule 8 (value -> value OP_I value .)
    OP_J            reduce using rule 8 (value -> value OP_I value .)
    OP_K            reduce using rule 8 (value -> value OP_I value .)
    OP_L            reduce using rule 8 (value -> value OP_I value .)
    OP_M            reduce using rule 8 (value -> value OP_I value .)
    OP_N            reduce using rule 8 (value -> value OP_I value .)
    OP_O            reduce using rule 8 (value -> value OP_I value .)
    OP_P            reduce using rule 8 (value -> value OP_I value .)
    OP_Q            reduce using rule 8 (value -> value OP_I value .)
    OP_S            reduce using rule 8 (value -> value OP_I value .)
    OP_T            reduce using rule 8 (value -> value OP_I value .)
    OP_U            reduce using rule 8 (value -> value OP_I value .)
    $end            reduce using rule 8 (value -> value OP_I value .)
    )               reduce using rule 8 (value -> value OP_I value .)
    MAPPING         reduce using rule 8 (value -> value OP_I value .)
    ,               reduce using rule 8 (value -> value OP_I value .)
    ]               reduce using rule 8 (value -> value OP_I value .)
    }               reduce using rule 8 (value -> value OP_I value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 8 (value -> value OP_I value .) ]
  ! OP_C            [ reduce using rule 8 (value -> value OP_I value .) ]
  ! OP_F            [ reduce using rule 8 (value -> value OP_I value .) ]
  ! OP_G            [ reduce using rule 8 (value -> value OP_I value .) ]
  ! INDEXER         [ reduce using rule 8 (value -> value OP_I value .) ]
  ! OP_D            [ shift and go to state 19 ]
  ! OP_E            [ shift and go to state 20 ]
  ! OP_H            [ shift and go to state 23 ]
  ! OP_I            [ shift and go to state 24 ]
  ! OP_J            [ shift and go to state 25 ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 58

    (9) value -> value OP_J value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_D            reduce using rule 9 (value -> value OP_J value .)
    OP_E            reduce using rule 9 (value -> value OP_J value .)
    OP_H            reduce using rule 9 (value -> value OP_J value .)
    OP_I            reduce using rule 9 (value -> value OP_J value .)
    OP_J            reduce using rule 9 (value -> value OP_J value .)
    OP_K            reduce using rule 9 (value -> value OP_J value .)
    OP_L            reduce using rule 9 (value -> value OP_J value .)
    OP_M            reduce using rule 9 (value -> value OP_J value .)
    OP_N            reduce using rule 9 (value -> value OP_J value .)
    OP_O            reduce using rule 9 (value -> value OP_J value .)
    OP_P            reduce using rule 9 (value -> value OP_J value .)
    OP_Q            reduce using rule 9 (value -> value OP_J value .)
    OP_S            reduce using rule 9 (value -> value OP_J value .)
    OP_T            reduce using rule 9 (value -> value OP_J value .)
    OP_U            reduce using rule 9 (value -> value OP_J value .)
    $end            reduce using rule 9 (value -> value OP_J value .)
    )               reduce using rule 9 (value -> value OP_J value .)
    MAPPING         reduce using rule 9 (value -> value OP_J value .)
    ,               reduce using rule 9 (value -> value OP_J value .)
    ]               reduce using rule 9 (value -> value OP_J value .)
    }               reduce using rule 9 (value -> value OP_J value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 9 (value -> value OP_J value .) ]
  ! OP_C            [ reduce using rule 9 (value -> value OP_J value .) ]
  ! OP_F            [ reduce using rule 9 (value -> value OP_J value .) ]
  ! OP_G            [ reduce using rule 9 (value -> value OP_J value .) ]
  ! INDEXER         [ reduce using rule 9 (value -> value OP_J value .) ]
  ! OP_D            [ shift and go to state 19 ]
  ! OP_E            [ shift and go to state 20 ]
  ! OP_H            [ shift and go to state 23 ]
  ! OP_I            [ shift and go to state 24 ]
  ! OP_J            [ shift and go to state 25 ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 59

    (10) value -> value OP_K value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_K            reduce using rule 10 (value -> value OP_K value .)
    OP_L            reduce using rule 10 (value -> value OP_K value .)
    OP_M            reduce using rule 10 (value -> value OP_K value .)
    OP_N            reduce using rule 10 (value -> value OP_K value .)
    OP_O            reduce using rule 10 (value -> value OP_K value .)
    OP_P            reduce using rule 10 (value -> value OP_K value .)
    OP_Q            reduce using rule 10 (value -> value OP_K value .)
    OP_S            reduce using rule 10 (value -> value OP_K value .)
    OP_T            reduce using rule 10 (value -> value OP_K value .)
    OP_U            reduce using rule 10 (value -> value OP_K value .)
    $end            reduce using rule 10 (value -> value OP_K value .)
    )               reduce using rule 10 (value -> value OP_K value .)
    MAPPING         reduce using rule 10 (value -> value OP_K value .)
    ,               reduce using rule 10 (value -> value OP_K value .)
    ]               reduce using rule 10 (value -> value OP_K value .)
    }               reduce using rule 10 (value -> value OP_K value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 10 (value -> value OP_K value .) ]
  ! OP_C            [ reduce using rule 10 (value -> value OP_K value .) ]
  ! OP_D            [ reduce using rule 10 (value -> value OP_K value .) ]
  ! OP_E            [ reduce using rule 10 (value -> value OP_K value .) ]
  ! OP_F            [ reduce using rule 10 (value -> value OP_K value .) ]
  ! OP_G            [ reduce using rule 10 (value -> value OP_K value .) ]
  ! OP_H            [ reduce using rule 10 (value -> value OP_K value .) ]
  ! OP_I            [ reduce using rule 10 (value -> value OP_K value .) ]
  ! OP_J            [ reduce using rule 10 (value -> value OP_K value .) ]
  ! INDEXER         [ reduce using rule 10 (value -> value OP_K value .) ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 60

    (11) value -> value OP_L value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_K            reduce using rule 11 (value -> value OP_L value .)
    OP_L            reduce using rule 11 (value -> value OP_L value .)
    OP_M            reduce using rule 11 (value -> value OP_L value .)
    OP_N            reduce using rule 11 (value -> value OP_L value .)
    OP_O            reduce using rule 11 (value -> value OP_L value .)
    OP_P            reduce using rule 11 (value -> value OP_L value .)
    OP_Q            reduce using rule 11 (value -> value OP_L value .)
    OP_S            reduce using rule 11 (value -> value OP_L value .)
    OP_T            reduce using rule 11 (value -> value OP_L value .)
    OP_U            reduce using rule 11 (value -> value OP_L value .)
    $end            reduce using rule 11 (value -> value OP_L value .)
    )               reduce using rule 11 (value -> value OP_L value .)
    MAPPING         reduce using rule 11 (value -> value OP_L value .)
    ,               reduce using rule 11 (value -> value OP_L value .)
    ]               reduce using rule 11 (value -> value OP_L value .)
    }               reduce using rule 11 (value -> value OP_L value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 11 (value -> value OP_L value .) ]
  ! OP_C            [ reduce using rule 11 (value -> value OP_L value .) ]
  ! OP_D            [ reduce using rule 11 (value -> value OP_L value .) ]
  ! OP_E            [ reduce using rule 11 (value -> value OP_L value .) ]
  ! OP_F            [ reduce using rule 11 (value -> value OP_L value .) ]
  ! OP_G            [ reduce using rule 11 (value -> value OP_L value .) ]
  ! OP_H            [ reduce using rule 11 (value -> value OP_L value .) ]
  ! OP_I            [ reduce using rule 11 (value -> value OP_L value .) ]
  ! OP_J            [ reduce using rule 11 (value -> value OP_L value .) ]
  ! INDEXER         [ reduce using rule 11 (value -> value OP_L value .) ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 61

    (12) value -> value OP_M value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_K            reduce using rule 12 (value -> value OP_M value .)
    OP_L            reduce using rule 12 (value -> value OP_M value .)
    OP_M            reduce using rule 12 (value -> value OP_M value .)
    OP_N            reduce using rule 12 (value -> value OP_M value .)
    OP_O            reduce using rule 12 (value -> value OP_M value .)
    OP_P            reduce using rule 12 (value -> value OP_M value .)
    OP_Q            reduce using rule 12 (value -> value OP_M value .)
    OP_S            reduce using rule 12 (value -> value OP_M value .)
    OP_T            reduce using rule 12 (value -> value OP_M value .)
    OP_U            reduce using rule 12 (value -> value OP_M value .)
    $end            reduce using rule 12 (value -> value OP_M value .)
    )               reduce using rule 12 (value -> value OP_M value .)
    MAPPING         reduce using rule 12 (value -> value OP_M value .)
    ,               reduce using rule 12 (value -> value OP_M value .)
    ]               reduce using rule 12 (value -> value OP_M value .)
    }               reduce using rule 12 (value -> value OP_M value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 12 (value -> value OP_M value .) ]
  ! OP_C            [ reduce using rule 12 (value -> value OP_M value .) ]
  ! OP_D            [ reduce using rule 12 (value -> value OP_M value .) ]
  ! OP_E            [ reduce using rule 12 (value -> value OP_M value .) ]
  ! OP_F            [ reduce using rule 12 (value -> value OP_M value .) ]
  ! OP_G            [ reduce using rule 12 (value -> value OP_M value .) ]
  ! OP_H            [ reduce using rule 12 (value -> value OP_M value .) ]
  ! OP_I            [ reduce using rule 12 (value -> value OP_M value .) ]
  ! OP_J            [ reduce using rule 12 (value -> value OP_M value .) ]
  ! INDEXER         [ reduce using rule 12 (value -> value OP_M value .) ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 62

    (13) value -> value OP_N value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_K            reduce using rule 13 (value -> value OP_N value .)
    OP_L            reduce using rule 13 (value -> value OP_N value .)
    OP_M            reduce using rule 13 (value -> value OP_N value .)
    OP_N            reduce using rule 13 (value -> value OP_N value .)
    OP_O            reduce using rule 13 (value -> value OP_N value .)
    OP_P            reduce using rule 13 (value -> value OP_N value .)
    OP_Q            reduce using rule 13 (value -> value OP_N value .)
    OP_S            reduce using rule 13 (value -> value OP_N value .)
    OP_T            reduce using rule 13 (value -> value OP_N value .)
    OP_U            reduce using rule 13 (value -> value OP_N value .)
    $end            reduce using rule 13 (value -> value OP_N value .)
    )               reduce using rule 13 (value -> value OP_N value .)
    MAPPING         reduce using rule 13 (value -> value OP_N value .)
    ,               reduce using rule 13 (value -> value OP_N value .)
    ]               reduce using rule 13 (value -> value OP_N value .)
    }               reduce using rule 13 (value -> value OP_N value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 13 (value -> value OP_N value .) ]
  ! OP_C            [ reduce using rule 13 (value -> value OP_N value .) ]
  ! OP_D            [ reduce using rule 13 (value -> value OP_N value .) ]
  ! OP_E            [ reduce using rule 13 (value -> value OP_N value .) ]
  ! OP_F            [ reduce using rule 13 (value -> value OP_N value .) ]
  ! OP_G            [ reduce using rule 13 (value -> value OP_N value .) ]
  ! OP_H            [ reduce using rule 13 (value -> value OP_N value .) ]
  ! OP_I            [ reduce using rule 13 (value -> value OP_N value .) ]
  ! OP_J            [ reduce using rule 13 (value -> value OP_N value .) ]
  ! INDEXER         [ reduce using rule 13 (value -> value OP_N value .) ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 63

    (14) value -> value OP_O value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_K            reduce using rule 14 (value -> value OP_O value .)
    OP_L            reduce using rule 14 (value -> value OP_O value .)
    OP_M            reduce using rule 14 (value -> value OP_O value .)
    OP_N            reduce using rule 14 (value -> value OP_O value .)
    OP_O            reduce using rule 14 (value -> value OP_O value .)
    OP_P            reduce using rule 14 (value -> value OP_O value .)
    OP_Q            reduce using rule 14 (value -> value OP_O value .)
    OP_S            reduce using rule 14 (value -> value OP_O value .)
    OP_T            reduce using rule 14 (value -> value OP_O value .)
    OP_U            reduce using rule 14 (value -> value OP_O value .)
    $end            reduce using rule 14 (value -> value OP_O value .)
    )               reduce using rule 14 (value -> value OP_O value .)
    MAPPING         reduce using rule 14 (value -> value OP_O value .)
    ,               reduce using rule 14 (value -> value OP_O value .)
    ]               reduce using rule 14 (value -> value OP_O value .)
    }               reduce using rule 14 (value -> value OP_O value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 14 (value -> value OP_O value .) ]
  ! OP_C            [ reduce using rule 14 (value -> value OP_O value .) ]
  ! OP_D            [ reduce using rule 14 (value -> value OP_O value .) ]
  ! OP_E            [ reduce using rule 14 (value -> value OP_O value .) ]
  ! OP_F            [ reduce using rule 14 (value -> value OP_O value .) ]
  ! OP_G            [ reduce using rule 14 (value -> value OP_O value .) ]
  ! OP_H            [ reduce using rule 14 (value -> value OP_O value .) ]
  ! OP_I            [ reduce using rule 14 (value -> value OP_O value .) ]
  ! OP_J            [ reduce using rule 14 (value -> value OP_O value .) ]
  ! INDEXER         [ reduce using rule 14 (value -> value OP_O value .) ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 64

    (15) value -> value OP_P value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_K            reduce using rule 15 (value -> value OP_P value .)
    OP_L            reduce using rule 15 (value -> value OP_P value .)
    OP_M            reduce using rule 15 (value -> value OP_P value .)
    OP_N            reduce using rule 15 (value -> value OP_P value .)
    OP_O            reduce using rule 15 (value -> value OP_P value .)
    OP_P            reduce using rule 15 (value -> value OP_P value .)
    OP_Q            reduce using rule 15 (value -> value OP_P value .)
    OP_S            reduce using rule 15 (value -> value OP_P value .)
    OP_T            reduce using rule 15 (value -> value OP_P value .)
    OP_U            reduce using rule 15 (value -> value OP_P value .)
    $end            reduce using rule 15 (value -> value OP_P value .)
    )               reduce using rule 15 (value -> value OP_P value .)
    MAPPING         reduce using rule 15 (value -> value OP_P value .)
    ,               reduce using rule 15 (value -> value OP_P value .)
    ]               reduce using rule 15 (value -> value OP_P value .)
    }               reduce using rule 15 (value -> value OP_P value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 15 (value -> value OP_P value .) ]
  ! OP_C            [ reduce using rule 15 (value -> value OP_P value .) ]
  ! OP_D            [ reduce using rule 15 (value -> value OP_P value .) ]
  ! OP_E            [ reduce using rule 15 (value -> value OP_P value .) ]
  ! OP_F            [ reduce using rule 15 (value -> value OP_P value .) ]
  ! OP_G            [ reduce using rule 15 (value -> value OP_P value .) ]
  ! OP_H            [ reduce using rule 15 (value -> value OP_P value .) ]
  ! OP_I            [ reduce using rule 15 (value -> value OP_P value .) ]
  ! OP_J            [ reduce using rule 15 (value -> value OP_P value .) ]
  ! INDEXER         [ reduce using rule 15 (value -> value OP_P value .) ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 65

    (16) value -> value OP_Q value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_K            reduce using rule 16 (value -> value OP_Q value .)
    OP_L            reduce using rule 16 (value -> value OP_Q value .)
    OP_M            reduce using rule 16 (value -> value OP_Q value .)
    OP_N            reduce using rule 16 (value -> value OP_Q value .)
    OP_O            reduce using rule 16 (value -> value OP_Q value .)
    OP_P            reduce using rule 16 (value -> value OP_Q value .)
    OP_Q            reduce using rule 16 (value -> value OP_Q value .)
    OP_S            reduce using rule 16 (value -> value OP_Q value .)
    OP_T            reduce using rule 16 (value -> value OP_Q value .)
    OP_U            reduce using rule 16 (value -> value OP_Q value .)
    $end            reduce using rule 16 (value -> value OP_Q value .)
    )               reduce using rule 16 (value -> value OP_Q value .)
    MAPPING         reduce using rule 16 (value -> value OP_Q value .)
    ,               reduce using rule 16 (value -> value OP_Q value .)
    ]               reduce using rule 16 (value -> value OP_Q value .)
    }               reduce using rule 16 (value -> value OP_Q value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 16 (value -> value OP_Q value .) ]
  ! OP_C            [ reduce using rule 16 (value -> value OP_Q value .) ]
  ! OP_D            [ reduce using rule 16 (value -> value OP_Q value .) ]
  ! OP_E            [ reduce using rule 16 (value -> value OP_Q value .) ]
  ! OP_F            [ reduce using rule 16 (value -> value OP_Q value .) ]
  ! OP_G            [ reduce using rule 16 (value -> value OP_Q value .) ]
  ! OP_H            [ reduce using rule 16 (value -> value OP_Q value .) ]
  ! OP_I            [ reduce using rule 16 (value -> value OP_Q value .) ]
  ! OP_J            [ reduce using rule 16 (value -> value OP_Q value .) ]
  ! INDEXER         [ reduce using rule 16 (value -> value OP_Q value .) ]
  ! OP_K            [ shift and go to state 26 ]
  ! OP_L            [ shift and go to state 27 ]
  ! OP_M            [ shift and go to state 28 ]
  ! OP_N            [ shift and go to state 29 ]
  ! OP_O            [ shift and go to state 30 ]
  ! OP_P            [ shift and go to state 31 ]
  ! OP_Q            [ shift and go to state 32 ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 66

    (17) value -> value OP_S value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_S            reduce using rule 17 (value -> value OP_S value .)
    OP_T            reduce using rule 17 (value -> value OP_S value .)
    OP_U            reduce using rule 17 (value -> value OP_S value .)
    $end            reduce using rule 17 (value -> value OP_S value .)
    )               reduce using rule 17 (value -> value OP_S value .)
    MAPPING         reduce using rule 17 (value -> value OP_S value .)
    ,               reduce using rule 17 (value -> value OP_S value .)
    ]               reduce using rule 17 (value -> value OP_S value .)
    }               reduce using rule 17 (value -> value OP_S value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    OP_K            shift and go to state 26
    OP_L            shift and go to state 27
    OP_M            shift and go to state 28
    OP_N            shift and go to state 29
    OP_O            shift and go to state 30
    OP_P            shift and go to state 31
    OP_Q            shift and go to state 32
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_C            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_D            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_E            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_F            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_G            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_H            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_I            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_J            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_K            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_L            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_M            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_N            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_O            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_P            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_Q            [ reduce using rule 17 (value -> value OP_S value .) ]
  ! INDEXER         [ reduce using rule 17 (value -> value OP_S value .) ]
  ! OP_S            [ shift and go to state 33 ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 67

    (18) value -> value OP_T value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    OP_T            reduce using rule 18 (value -> value OP_T value .)
    OP_U            reduce using rule 18 (value -> value OP_T value .)
    $end            reduce using rule 18 (value -> value OP_T value .)
    )               reduce using rule 18 (value -> value OP_T value .)
    MAPPING         reduce using rule 18 (value -> value OP_T value .)
    ,               reduce using rule 18 (value -> value OP_T value .)
    ]               reduce using rule 18 (value -> value OP_T value .)
    }               reduce using rule 18 (value -> value OP_T value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    OP_K            shift and go to state 26
    OP_L            shift and go to state 27
    OP_M            shift and go to state 28
    OP_N            shift and go to state 29
    OP_O            shift and go to state 30
    OP_P            shift and go to state 31
    OP_Q            shift and go to state 32
    OP_S            shift and go to state 33
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_C            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_D            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_E            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_F            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_G            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_H            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_I            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_J            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_K            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_L            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_M            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_N            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_O            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_P            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_Q            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_S            [ reduce using rule 18 (value -> value OP_T value .) ]
  ! INDEXER         [ reduce using rule 18 (value -> value OP_T value .) ]
  ! OP_T            [ shift and go to state 34 ]
  ! OP_U            [ shift and go to state 35 ]


state 68

    (19) value -> value OP_U value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    $end            reduce using rule 19 (value -> value OP_U value .)
    )               reduce using rule 19 (value -> value OP_U value .)
    MAPPING         reduce using rule 19 (value -> value OP_U value .)
    ,               reduce using rule 19 (value -> value OP_U value .)
    ]               reduce using rule 19 (value -> value OP_U value .)
    }               reduce using rule 19 (value -> value OP_U value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    OP_K            shift and go to state 26
    OP_L            shift and go to state 27
    OP_M            shift and go to state 28
    OP_N            shift and go to state 29
    OP_O            shift and go to state 30
    OP_P            shift and go to state 31
    OP_Q            shift and go to state 32
    OP_S            shift and go to state 33
    OP_T            shift and go to state 34
    OP_U            shift and go to state 35
    INDEXER         shift and go to state 36

  ! OP_B            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_C            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_D            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_E            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_F            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_G            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_H            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_I            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_J            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_K            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_L            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_M            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_N            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_O            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_P            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_Q            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_S            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_T            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! OP_U            [ reduce using rule 19 (value -> value OP_U value .) ]
  ! INDEXER         [ reduce using rule 19 (value -> value OP_U value .) ]


state 69

    (36) value -> value INDEXER args . ]

    ]               shift and go to state 81


state 70

    (30) value -> ( value ) .

    OP_B            reduce using rule 30 (value -> ( value ) .)
    OP_C            reduce using rule 30 (value -> ( value ) .)
    OP_D            reduce using rule 30 (value -> ( value ) .)
    OP_E            reduce using rule 30 (value -> ( value ) .)
    OP_F            reduce using rule 30 (value -> ( value ) .)
    OP_G            reduce using rule 30 (value -> ( value ) .)
    OP_H            reduce using rule 30 (value -> ( value ) .)
    OP_I            reduce using rule 30 (value -> ( value ) .)
    OP_J            reduce using rule 30 (value -> ( value ) .)
    OP_K            reduce using rule 30 (value -> ( value ) .)
    OP_L            reduce using rule 30 (value -> ( value ) .)
    OP_M            reduce using rule 30 (value -> ( value ) .)
    OP_N            reduce using rule 30 (value -> ( value ) .)
    OP_O            reduce using rule 30 (value -> ( value ) .)
    OP_P            reduce using rule 30 (value -> ( value ) .)
    OP_Q            reduce using rule 30 (value -> ( value ) .)
    OP_S            reduce using rule 30 (value -> ( value ) .)
    OP_T            reduce using rule 30 (value -> ( value ) .)
    OP_U            reduce using rule 30 (value -> ( value ) .)
    INDEXER         reduce using rule 30 (value -> ( value ) .)
    $end            reduce using rule 30 (value -> ( value ) .)
    )               reduce using rule 30 (value -> ( value ) .)
    MAPPING         reduce using rule 30 (value -> ( value ) .)
    ,               reduce using rule 30 (value -> ( value ) .)
    ]               reduce using rule 30 (value -> ( value ) .)
    }               reduce using rule 30 (value -> ( value ) .)


state 71

    (37) value -> INDEXER args ] .

    OP_B            reduce using rule 37 (value -> INDEXER args ] .)
    OP_C            reduce using rule 37 (value -> INDEXER args ] .)
    OP_D            reduce using rule 37 (value -> INDEXER args ] .)
    OP_E            reduce using rule 37 (value -> INDEXER args ] .)
    OP_F            reduce using rule 37 (value -> INDEXER args ] .)
    OP_G            reduce using rule 37 (value -> INDEXER args ] .)
    OP_H            reduce using rule 37 (value -> INDEXER args ] .)
    OP_I            reduce using rule 37 (value -> INDEXER args ] .)
    OP_J            reduce using rule 37 (value -> INDEXER args ] .)
    OP_K            reduce using rule 37 (value -> INDEXER args ] .)
    OP_L            reduce using rule 37 (value -> INDEXER args ] .)
    OP_M            reduce using rule 37 (value -> INDEXER args ] .)
    OP_N            reduce using rule 37 (value -> INDEXER args ] .)
    OP_O            reduce using rule 37 (value -> INDEXER args ] .)
    OP_P            reduce using rule 37 (value -> INDEXER args ] .)
    OP_Q            reduce using rule 37 (value -> INDEXER args ] .)
    OP_S            reduce using rule 37 (value -> INDEXER args ] .)
    OP_T            reduce using rule 37 (value -> INDEXER args ] .)
    OP_U            reduce using rule 37 (value -> INDEXER args ] .)
    INDEXER         reduce using rule 37 (value -> INDEXER args ] .)
    $end            reduce using rule 37 (value -> INDEXER args ] .)
    )               reduce using rule 37 (value -> INDEXER args ] .)
    MAPPING         reduce using rule 37 (value -> INDEXER args ] .)
    ,               reduce using rule 37 (value -> INDEXER args ] .)
    ]               reduce using rule 37 (value -> INDEXER args ] .)
    }               reduce using rule 37 (value -> INDEXER args ] .)


state 72

    (33) args -> arglist , . named_arglist
    (43) arglist -> arglist , . arglist
    (45) incomplete_arglist -> arglist , .
    (46) named_arglist -> . named_arg
    (47) named_arglist -> . named_arglist , named_arg
    (41) arglist -> . value
    (42) arglist -> . , arglist
    (43) arglist -> . arglist , arglist
    (44) arglist -> . incomplete_arglist , arglist
    (40) named_arg -> . value MAPPING value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (45) incomplete_arglist -> . arglist ,
    (48) func -> . FUNC args )

    ,               reduce using rule 45 (incomplete_arglist -> arglist , .)
    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

  ! ,               [ shift and go to state 44 ]

    arglist                        shift and go to state 82
    named_arglist                  shift and go to state 83
    named_arg                      shift and go to state 47
    value                          shift and go to state 84
    incomplete_arglist             shift and go to state 76
    func                           shift and go to state 15

state 73

    (47) named_arglist -> named_arglist , . named_arg
    (40) named_arg -> . value MAPPING value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    named_arg                      shift and go to state 85
    value                          shift and go to state 86
    func                           shift and go to state 15

state 74

    (42) arglist -> , arglist .
    (43) arglist -> arglist . , arglist
    (45) incomplete_arglist -> arglist . ,

    ,               reduce using rule 42 (arglist -> , arglist .)
    ]               reduce using rule 42 (arglist -> , arglist .)
    }               reduce using rule 42 (arglist -> , arglist .)
    )               reduce using rule 42 (arglist -> , arglist .)

  ! ,               [ shift and go to state 87 ]


state 75

    (41) arglist -> value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    ,               reduce using rule 41 (arglist -> value .)
    ]               reduce using rule 41 (arglist -> value .)
    }               reduce using rule 41 (arglist -> value .)
    )               reduce using rule 41 (arglist -> value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    OP_K            shift and go to state 26
    OP_L            shift and go to state 27
    OP_M            shift and go to state 28
    OP_N            shift and go to state 29
    OP_O            shift and go to state 30
    OP_P            shift and go to state 31
    OP_Q            shift and go to state 32
    OP_S            shift and go to state 33
    OP_T            shift and go to state 34
    OP_U            shift and go to state 35
    INDEXER         shift and go to state 36


state 76

    (44) arglist -> incomplete_arglist . , arglist

    ,               shift and go to state 88


state 77

    (34) args -> incomplete_arglist , . named_arglist
    (44) arglist -> incomplete_arglist , . arglist
    (46) named_arglist -> . named_arg
    (47) named_arglist -> . named_arglist , named_arg
    (41) arglist -> . value
    (42) arglist -> . , arglist
    (43) arglist -> . arglist , arglist
    (44) arglist -> . incomplete_arglist , arglist
    (40) named_arg -> . value MAPPING value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (45) incomplete_arglist -> . arglist ,
    (48) func -> . FUNC args )

    ,               shift and go to state 44
    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    incomplete_arglist             shift and go to state 76
    named_arglist                  shift and go to state 89
    arglist                        shift and go to state 90
    named_arg                      shift and go to state 47
    value                          shift and go to state 84
    func                           shift and go to state 15

state 78

    (40) named_arg -> value MAPPING . value
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (48) func -> . FUNC args )

    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    value                          shift and go to state 91
    func                           shift and go to state 15

state 79

    (38) value -> MAP args } .

    OP_B            reduce using rule 38 (value -> MAP args } .)
    OP_C            reduce using rule 38 (value -> MAP args } .)
    OP_D            reduce using rule 38 (value -> MAP args } .)
    OP_E            reduce using rule 38 (value -> MAP args } .)
    OP_F            reduce using rule 38 (value -> MAP args } .)
    OP_G            reduce using rule 38 (value -> MAP args } .)
    OP_H            reduce using rule 38 (value -> MAP args } .)
    OP_I            reduce using rule 38 (value -> MAP args } .)
    OP_J            reduce using rule 38 (value -> MAP args } .)
    OP_K            reduce using rule 38 (value -> MAP args } .)
    OP_L            reduce using rule 38 (value -> MAP args } .)
    OP_M            reduce using rule 38 (value -> MAP args } .)
    OP_N            reduce using rule 38 (value -> MAP args } .)
    OP_O            reduce using rule 38 (value -> MAP args } .)
    OP_P            reduce using rule 38 (value -> MAP args } .)
    OP_Q            reduce using rule 38 (value -> MAP args } .)
    OP_S            reduce using rule 38 (value -> MAP args } .)
    OP_T            reduce using rule 38 (value -> MAP args } .)
    OP_U            reduce using rule 38 (value -> MAP args } .)
    INDEXER         reduce using rule 38 (value -> MAP args } .)
    $end            reduce using rule 38 (value -> MAP args } .)
    )               reduce using rule 38 (value -> MAP args } .)
    MAPPING         reduce using rule 38 (value -> MAP args } .)
    ,               reduce using rule 38 (value -> MAP args } .)
    ]               reduce using rule 38 (value -> MAP args } .)
    }               reduce using rule 38 (value -> MAP args } .)


state 80

    (48) func -> FUNC args ) .

    OP_B            reduce using rule 48 (func -> FUNC args ) .)
    OP_C            reduce using rule 48 (func -> FUNC args ) .)
    OP_D            reduce using rule 48 (func -> FUNC args ) .)
    OP_E            reduce using rule 48 (func -> FUNC args ) .)
    OP_F            reduce using rule 48 (func -> FUNC args ) .)
    OP_G            reduce using rule 48 (func -> FUNC args ) .)
    OP_H            reduce using rule 48 (func -> FUNC args ) .)
    OP_I            reduce using rule 48 (func -> FUNC args ) .)
    OP_J            reduce using rule 48 (func -> FUNC args ) .)
    OP_K            reduce using rule 48 (func -> FUNC args ) .)
    OP_L            reduce using rule 48 (func -> FUNC args ) .)
    OP_M            reduce using rule 48 (func -> FUNC args ) .)
    OP_N            reduce using rule 48 (func -> FUNC args ) .)
    OP_O            reduce using rule 48 (func -> FUNC args ) .)
    OP_P            reduce using rule 48 (func -> FUNC args ) .)
    OP_Q            reduce using rule 48 (func -> FUNC args ) .)
    OP_S            reduce using rule 48 (func -> FUNC args ) .)
    OP_T            reduce using rule 48 (func -> FUNC args ) .)
    OP_U            reduce using rule 48 (func -> FUNC args ) .)
    INDEXER         reduce using rule 48 (func -> FUNC args ) .)
    $end            reduce using rule 48 (func -> FUNC args ) .)
    )               reduce using rule 48 (func -> FUNC args ) .)
    MAPPING         reduce using rule 48 (func -> FUNC args ) .)
    ,               reduce using rule 48 (func -> FUNC args ) .)
    ]               reduce using rule 48 (func -> FUNC args ) .)
    }               reduce using rule 48 (func -> FUNC args ) .)


state 81

    (36) value -> value INDEXER args ] .

    OP_B            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_C            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_D            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_E            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_F            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_G            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_H            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_I            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_J            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_K            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_L            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_M            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_N            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_O            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_P            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_Q            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_S            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_T            reduce using rule 36 (value -> value INDEXER args ] .)
    OP_U            reduce using rule 36 (value -> value INDEXER args ] .)
    INDEXER         reduce using rule 36 (value -> value INDEXER args ] .)
    $end            reduce using rule 36 (value -> value INDEXER args ] .)
    )               reduce using rule 36 (value -> value INDEXER args ] .)
    MAPPING         reduce using rule 36 (value -> value INDEXER args ] .)
    ,               reduce using rule 36 (value -> value INDEXER args ] .)
    ]               reduce using rule 36 (value -> value INDEXER args ] .)
    }               reduce using rule 36 (value -> value INDEXER args ] .)


state 82

    (43) arglist -> arglist , arglist .
    (43) arglist -> arglist . , arglist
    (45) incomplete_arglist -> arglist . ,

    ,               reduce using rule 43 (arglist -> arglist , arglist .)
    ]               reduce using rule 43 (arglist -> arglist , arglist .)
    }               reduce using rule 43 (arglist -> arglist , arglist .)
    )               reduce using rule 43 (arglist -> arglist , arglist .)

  ! ,               [ shift and go to state 87 ]


state 83

    (33) args -> arglist , named_arglist .
    (47) named_arglist -> named_arglist . , named_arg

    ]               reduce using rule 33 (args -> arglist , named_arglist .)
    }               reduce using rule 33 (args -> arglist , named_arglist .)
    )               reduce using rule 33 (args -> arglist , named_arglist .)
    ,               shift and go to state 73


state 84

    (41) arglist -> value .
    (40) named_arg -> value . MAPPING value
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    ,               reduce using rule 41 (arglist -> value .)
    ]               reduce using rule 41 (arglist -> value .)
    }               reduce using rule 41 (arglist -> value .)
    )               reduce using rule 41 (arglist -> value .)
    MAPPING         shift and go to state 78
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    OP_K            shift and go to state 26
    OP_L            shift and go to state 27
    OP_M            shift and go to state 28
    OP_N            shift and go to state 29
    OP_O            shift and go to state 30
    OP_P            shift and go to state 31
    OP_Q            shift and go to state 32
    OP_S            shift and go to state 33
    OP_T            shift and go to state 34
    OP_U            shift and go to state 35
    INDEXER         shift and go to state 36


state 85

    (47) named_arglist -> named_arglist , named_arg .

    ,               reduce using rule 47 (named_arglist -> named_arglist , named_arg .)
    ]               reduce using rule 47 (named_arglist -> named_arglist , named_arg .)
    }               reduce using rule 47 (named_arglist -> named_arglist , named_arg .)
    )               reduce using rule 47 (named_arglist -> named_arglist , named_arg .)


state 86

    (40) named_arg -> value . MAPPING value
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    MAPPING         shift and go to state 78
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    OP_K            shift and go to state 26
    OP_L            shift and go to state 27
    OP_M            shift and go to state 28
    OP_N            shift and go to state 29
    OP_O            shift and go to state 30
    OP_P            shift and go to state 31
    OP_Q            shift and go to state 32
    OP_S            shift and go to state 33
    OP_T            shift and go to state 34
    OP_U            shift and go to state 35
    INDEXER         shift and go to state 36


state 87

    (43) arglist -> arglist , . arglist
    (45) incomplete_arglist -> arglist , .
    (41) arglist -> . value
    (42) arglist -> . , arglist
    (43) arglist -> . arglist , arglist
    (44) arglist -> . incomplete_arglist , arglist
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (45) incomplete_arglist -> . arglist ,
    (48) func -> . FUNC args )

    ,               reduce using rule 45 (incomplete_arglist -> arglist , .)
    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

  ! ,               [ shift and go to state 44 ]

    arglist                        shift and go to state 82
    value                          shift and go to state 75
    incomplete_arglist             shift and go to state 76
    func                           shift and go to state 15

state 88

    (44) arglist -> incomplete_arglist , . arglist
    (41) arglist -> . value
    (42) arglist -> . , arglist
    (43) arglist -> . arglist , arglist
    (44) arglist -> . incomplete_arglist , arglist
    (1) value -> . value OP_B value
    (2) value -> . value OP_C value
    (3) value -> . value OP_D value
    (4) value -> . value OP_E value
    (5) value -> . value OP_F value
    (6) value -> . value OP_G value
    (7) value -> . value OP_H value
    (8) value -> . value OP_I value
    (9) value -> . value OP_J value
    (10) value -> . value OP_K value
    (11) value -> . value OP_L value
    (12) value -> . value OP_M value
    (13) value -> . value OP_N value
    (14) value -> . value OP_O value
    (15) value -> . value OP_P value
    (16) value -> . value OP_Q value
    (17) value -> . value OP_S value
    (18) value -> . value OP_T value
    (19) value -> . value OP_U value
    (20) value -> . OP_D value
    (21) value -> . OP_E value
    (22) value -> . OP_R value
    (23) value -> . QUOTED_STRING
    (24) value -> . NUMBER
    (25) value -> . TRUE
    (26) value -> . FALSE
    (27) value -> . NULL
    (28) value -> . KEYWORD_STRING
    (29) value -> . DOLLAR
    (30) value -> . ( value )
    (36) value -> . value INDEXER args ]
    (37) value -> . INDEXER args ]
    (38) value -> . MAP args }
    (39) value -> . func
    (45) incomplete_arglist -> . arglist ,
    (48) func -> . FUNC args )

    ,               shift and go to state 44
    OP_D            shift and go to state 2
    OP_E            shift and go to state 3
    OP_R            shift and go to state 4
    QUOTED_STRING   shift and go to state 5
    NUMBER          shift and go to state 6
    TRUE            shift and go to state 7
    FALSE           shift and go to state 8
    NULL            shift and go to state 9
    KEYWORD_STRING  shift and go to state 10
    DOLLAR          shift and go to state 11
    (               shift and go to state 12
    INDEXER         shift and go to state 13
    MAP             shift and go to state 14
    FUNC            shift and go to state 16

    incomplete_arglist             shift and go to state 76
    arglist                        shift and go to state 90
    value                          shift and go to state 75
    func                           shift and go to state 15

state 89

    (34) args -> incomplete_arglist , named_arglist .
    (47) named_arglist -> named_arglist . , named_arg

    ]               reduce using rule 34 (args -> incomplete_arglist , named_arglist .)
    }               reduce using rule 34 (args -> incomplete_arglist , named_arglist .)
    )               reduce using rule 34 (args -> incomplete_arglist , named_arglist .)
    ,               shift and go to state 73


state 90

    (44) arglist -> incomplete_arglist , arglist .
    (43) arglist -> arglist . , arglist
    (45) incomplete_arglist -> arglist . ,

    ,               reduce using rule 44 (arglist -> incomplete_arglist , arglist .)
    ]               reduce using rule 44 (arglist -> incomplete_arglist , arglist .)
    }               reduce using rule 44 (arglist -> incomplete_arglist , arglist .)
    )               reduce using rule 44 (arglist -> incomplete_arglist , arglist .)

  ! ,               [ shift and go to state 87 ]


state 91

    (40) named_arg -> value MAPPING value .
    (1) value -> value . OP_B value
    (2) value -> value . OP_C value
    (3) value -> value . OP_D value
    (4) value -> value . OP_E value
    (5) value -> value . OP_F value
    (6) value -> value . OP_G value
    (7) value -> value . OP_H value
    (8) value -> value . OP_I value
    (9) value -> value . OP_J value
    (10) value -> value . OP_K value
    (11) value -> value . OP_L value
    (12) value -> value . OP_M value
    (13) value -> value . OP_N value
    (14) value -> value . OP_O value
    (15) value -> value . OP_P value
    (16) value -> value . OP_Q value
    (17) value -> value . OP_S value
    (18) value -> value . OP_T value
    (19) value -> value . OP_U value
    (36) value -> value . INDEXER args ]

    ,               reduce using rule 40 (named_arg -> value MAPPING value .)
    ]               reduce using rule 40 (named_arg -> value MAPPING value .)
    }               reduce using rule 40 (named_arg -> value MAPPING value .)
    )               reduce using rule 40 (named_arg -> value MAPPING value .)
    OP_B            shift and go to state 17
    OP_C            shift and go to state 18
    OP_D            shift and go to state 19
    OP_E            shift and go to state 20
    OP_F            shift and go to state 21
    OP_G            shift and go to state 22
    OP_H            shift and go to state 23
    OP_I            shift and go to state 24
    OP_J            shift and go to state 25
    OP_K            shift and go to state 26
    OP_L            shift and go to state 27
    OP_M            shift and go to state 28
    OP_N            shift and go to state 29
    OP_O            shift and go to state 30
    OP_P            shift and go to state 31
    OP_Q            shift and go to state 32
    OP_S            shift and go to state 33
    OP_T            shift and go to state 34
    OP_U            shift and go to state 35
    INDEXER         shift and go to state 36

